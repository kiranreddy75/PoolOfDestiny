{"ast":null,"code":"import { equal } from '@wry/equality';\nimport { graphQLResultHasError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\n\nvar QueryInfo = function () {\n  function QueryInfo(cache) {\n    this.cache = cache;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.dirty = false;\n    this.diff = null;\n    this.observableQuery = null;\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDirty = function () {\n    var _this = this;\n\n    if (!this.dirty) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var oldDiff = this.diff;\n    this.diff = diff;\n\n    if (!this.dirty && (diff === null || diff === void 0 ? void 0 : diff.result) !== (oldDiff === null || oldDiff === void 0 ? void 0 : oldDiff.result)) {\n      this.setDirty();\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      this.listeners.add(this.oqListener = function () {\n        return oq.reobserve();\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    this.cancel();\n    delete this.cancel;\n    this.variables = this.networkStatus = this.networkError = this.graphQLErrors = this.lastWatch = this.lastWrittenResult = this.lastWrittenVars = void 0;\n    var oq = this.observableQuery;\n    if (oq) oq.stopPolling();\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (!this.lastWatch || this.lastWatch.query !== this.document || !equal(variables, this.lastWatch.variables)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = {\n        query: this.document,\n        variables: variables,\n        optimistic: true,\n        callback: function (diff) {\n          return _this.setDiff(diff);\n        }\n      });\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.diff = {\n        result: result.data,\n        complete: true\n      };\n    } else if (allowCacheWrite) {\n      var ignoreErrors = options.errorPolicy === 'ignore' || options.errorPolicy === 'all';\n      var writeWithErrors = !graphQLResultHasError(result);\n\n      if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n      }\n\n      if (writeWithErrors) {\n        this.cache.performTransaction(function (cache) {\n          if (equal(result, _this.lastWrittenResult) && equal(options.variables, _this.lastWrittenVars)) {\n            if (_this.diff && _this.diff.complete) {\n              result.data = _this.diff.result;\n              return;\n            }\n          } else {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables\n            });\n            _this.lastWrittenResult = result;\n            _this.lastWrittenVars = options.variables;\n          }\n\n          var diff = cache.diff({\n            query: _this.document,\n            variables: options.variables,\n            returnPartialData: true,\n            optimistic: true\n          });\n          _this.diff = diff;\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrittenResult = this.lastWrittenVars = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrittenResult = this.lastWrittenVars = void 0;\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };","map":{"version":3,"sources":["QueryInfo.js"],"names":[],"mappings":"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","sourcesContent":["import { equal } from \"@wry/equality\";\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { graphQLResultHasError } from '../utilities/common/errorHandling';\nimport { NetworkStatus, isNetworkRequestInFlight, } from './networkStatus';\nvar QueryInfo = (function () {\n    function QueryInfo(cache) {\n        this.cache = cache;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.subscriptions = new Set();\n        this.dirty = false;\n        this.diff = null;\n        this.observableQuery = null;\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.setDirty = function () {\n        var _this = this;\n        if (!this.dirty) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n        return this;\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var oldDiff = this.diff;\n        this.diff = diff;\n        if (!this.dirty && (diff === null || diff === void 0 ? void 0 : diff.result) !== (oldDiff === null || oldDiff === void 0 ? void 0 : oldDiff.result)) {\n            this.setDirty();\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            this.listeners.add(this.oqListener = function () { return oq.reobserve(); });\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        if (this.notifyTimeout) {\n            clearTimeout(this.notifyTimeout);\n            this.notifyTimeout = void 0;\n        }\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) &&\n            this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" &&\n                fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        this.cancel();\n        delete this.cancel;\n        this.variables =\n            this.networkStatus =\n                this.networkError =\n                    this.graphQLErrors =\n                        this.lastWatch =\n                            this.lastWrittenResult =\n                                this.lastWrittenVars = void 0;\n        var oq = this.observableQuery;\n        if (oq)\n            oq.stopPolling();\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (!this.lastWatch ||\n            this.lastWatch.query !== this.document ||\n            !equal(variables, this.lastWatch.variables)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = {\n                query: this.document,\n                variables: variables,\n                optimistic: true,\n                callback: function (diff) { return _this.setDiff(diff); },\n            });\n        }\n        return this;\n    };\n    QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n        var _this = this;\n        this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        if (options.fetchPolicy === 'no-cache') {\n            this.diff = { result: result.data, complete: true };\n        }\n        else if (allowCacheWrite) {\n            var ignoreErrors = options.errorPolicy === 'ignore' ||\n                options.errorPolicy === 'all';\n            var writeWithErrors = !graphQLResultHasError(result);\n            if (!writeWithErrors && ignoreErrors && result.data) {\n                writeWithErrors = true;\n            }\n            if (writeWithErrors) {\n                this.cache.performTransaction(function (cache) {\n                    if (equal(result, _this.lastWrittenResult) &&\n                        equal(options.variables, _this.lastWrittenVars)) {\n                        if (_this.diff && _this.diff.complete) {\n                            result.data = _this.diff.result;\n                            return;\n                        }\n                    }\n                    else {\n                        cache.writeQuery({\n                            query: _this.document,\n                            data: result.data,\n                            variables: options.variables,\n                        });\n                        _this.lastWrittenResult = result;\n                        _this.lastWrittenVars = options.variables;\n                    }\n                    var diff = cache.diff({\n                        query: _this.document,\n                        variables: options.variables,\n                        returnPartialData: true,\n                        optimistic: true,\n                    });\n                    _this.diff = diff;\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrittenResult = this.lastWrittenVars = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return this.networkStatus = NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrittenResult = this.lastWrittenVars = void 0;\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\n//# sourceMappingURL=QueryInfo.js.map"]},"metadata":{},"sourceType":"module"}